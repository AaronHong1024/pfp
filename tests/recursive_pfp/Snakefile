############################################################
## All
############################################################

DATASETS = ['250', '500', '750', '1000', '1250', '1500', '1750', '2000', '2250', '2500']

rule all:
    input:
        from_vcf_csvs = expand("work_dir/H12_{dataset}/{dataset}:from_vcf.csv", dataset=DATASETS),
        recursive_csvs = expand("work_dir/H12_{dataset}/{dataset}:recursive.csv", dataset=DATASETS)
    output:
        out_plot = "out_dir/human_chr_17_19_PFP_size.svg"
    run:
        import pandas as pd
        import matplotlib.pyplot as plt
        import matplotlib
        import numpy as np
        import seaborn as sns

        dfs = []
        for filename in input.recursive_csvs:
            df = pd.read_csv(filename, index_col=None, header=0)
            dfs.append(df)

        rec_frame = pd.concat(dfs, axis=0, ignore_index=True)
        rec_frame['tot'] = ((rec_frame['parse_lenght'] * 4) + rec_frame['dict_tot_length'])
        rec_frame = rec_frame.astype({'tot': 'float'})
        rec_frame['tot_GB'] = rec_frame['tot'] / 1024 / 1024 / 1024

        dfs = []
        for filename in input.from_vcf_csvs:
            df = pd.read_csv(filename, index_col=None, header=0)
            dfs.append(df)

        vcf_frame = pd.concat(dfs, axis=0, ignore_index=True)
        vcf_frame['tot'] = ((vcf_frame['parse_lenght'] * 4) + vcf_frame['dict_tot_length'])
        vcf_frame = vcf_frame.astype({'tot': 'float'})
        vcf_frame['tot_GB'] = vcf_frame['tot'] / 1024 / 1024 / 1024

        from_vcf = vcf_frame['tot_GB']
        from_recursive = rec_frame['tot_GB']

        font = {'family' : 'normal',
                'weight' : 'normal',
                'size'   : 14}

        matplotlib.rc('font', **font)

        fig, axes = plt.subplots(nrows=1, ncols=1)
        fig.set_size_inches(5, 4)

        input_size = DATASETS

        axes.plot(input_size, from_vcf, marker='s', markersize=5, label='VCF')
        axes.plot(input_size, from_recursive, marker='D', markersize=5, label='Recursive')

        axes.set_xlabel('Haplotypes')
        axes.set_ylabel('|D| + |P| (GB)')
        axes.set_xlim(0, max(input_size) + 100)

        axes.grid(which='major', axis='both', linestyle='--')

        fig.tight_layout()
        plt.savefig(output.out_plot)


rule run_pfp_vcf:
    input:
        pfp_exe = "work_dir/pfp++"

    output:
        out_pfp = "work_dir/H12_{dataset}/{dataset}:from_vcf.parse",
        out_csv = "work_dir/H12_{dataset}/{dataset}:from_vcf.csv"

    benchmark: "work_dir/benchmarks/pfp.{dataset}:from_vcf.txt"

    params:
        vcf_17 = "/blue/boucher/marco.oliva/data/1kgp/vcf/ALL.chr17.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz",
        vcf_18 = "/blue/boucher/marco.oliva/data/1kgp/vcf/ALL.chr18.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz",
        vcf_19 = "/blue/boucher/marco.oliva/data/1kgp/vcf/ALL.chr19.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz",
        ref_17 = "/blue/boucher/marco.oliva/data/1kgp/reference/17.fa.gz",
        ref_18 = "/blue/boucher/marco.oliva/data/1kgp/reference/18.fa.gz",
        ref_19 = "/blue/boucher/marco.oliva/data/1kgp/reference/19.fa.gz",
        w = '10', p = '100'

    threads: 64

    shell:
        """
        {input.pfp_exe} -v {params.vcf_17} {params.vcf_18} {params.vcf_19} \
        -r {params.ref_17} {params.ref_18} {params.ref_19} \
        -H12 -m {wildcards.dataset} -w {params.w} -p {params.p} \
        -o work_dir/H12_{wildcards.dataset}/{wildcards.dataset}:from_vcf \
        --use-acceleration --threads {threads}
        """

rule run_pfp_recursive:
    input:
        pfp_exe = "work_dir/pfp++",
        in_pfp = "work_dir/H12_{dataset}/{dataset}:from_vcf.parse"

    output:
        out_pfp = "work_dir/H12_{dataset}/{dataset}:recursive.csv"

    benchmark: "work_dir/benchmarks/pfp.{dataset}:recursive.txt"

    params:
        w = '5', p = '10'

    shell:
        """
        {input.pfp_exe} -i {input.in_pfp} -w {params.w} -p {params.p} \
        -o work_dir/H12_{wildcards.dataset}/{wildcards.dataset}:recursive
        """

############################################################
## Clears
############################################################

rule clean:
    shell:
        """
        rm -rf work_dir input_files tmp_dir
        """

rule clean_work_dir:
    shell:
        """
        rm -rf work_dir
        """

############################################################
## Utils
############################################################

rule get_pfp:
    output:
        pfp_exe = "work_dir/pfp++"
    shell:
        """
        module load git cmake
        git clone git@github.com:marco-oliva/pfp.git
        cd pfp
        mkdir build && cd build
        cmake -DHTSlib_HIPERGATOR ..
        make -j pfp++
        cp pfp++ ../../{output.pfp_exe}
        """
